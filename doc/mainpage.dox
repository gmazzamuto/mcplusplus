/**
  \mainpage

  \tableofcontents

  \section Introduction Introduction

Numerous areas of science employ Monte Carlo (MC) methods to simulate complex
processes. Light propagation in random media, often referred to as photon
migration, is an area of physics in which such methods are of great importance.
Prime examples include radiative transfer in highly scattering materials such
as biological tissues, clouds, and pharmaceuticals. There, MC simulation is
generally considered the gold standard of modeling and is used to investigate
complex systems and processes, to validate simpler models, as well as to
evaluate data.

Given the complexity of the radiative transfer equation (RTE) -- a widely used
analytical model for light diffusion through turbid media -- approximations
such as the diffusion approximation (DA) are most often used. However these
simplifications do not perform equally well in every situation and they have
their shortcomings. On the other hand the RTE directly follows from energy
conservation. Its derivation is phenomenological, where the complex wave
propagation is reduced to a Poissonian random walk with exponentially
distributed steps between scattering events, with correlations in
directionality given by the phase function. With the computing power available
nowadays, it is possible to implement a Monte Carlo method to find exact
solutions to the RTE, the only approximation being that the number of simulated
photons is finite. This is especially true because this kind of simulations
have an inherently parallel nature and so they can leverage nowadays
multi-threading CPUs and GPUs.

Some excerpts rearranged from \cite svensson2013breakdown \cite contini1997photonMigration.

  \section Motivation Motivation

MCPlusPlus is a Monte Carlo implementation of photon transport in turbid
layered media. As its name suggests, MCPlusPlus is entirely written in C++. We
think that the Object-oriented programming (OOP) paradigm and the abstraction
layer that it provides apply very well to the problem described above. OOP
allows to encapsulate concepts as reusable objects, thus providing ease of
maintenance, increased code understandability and modular architecture. With
this powerful tool, we can implement a software package that is much more
flexible than the most widely used MC codes, yet having equal to superior
performance. The OOP makes it easy to expand and customize the code, that's why
we can provide some unique features such as:

- customizable photon source (time distribution, k vector distribution)

- optional raw output in binary format (H5)

- flexible interface for multi-variate histogramming in binary format (H5)

- multi threading

- Python bindings

  \section Download Download

  <a href="sw/mcplusplus_2015.07.30_amd64.deb">mcplusplus_2015.07.30_amd64.deb</a> (211 KiB)

  <a href="sw/mcplusplus-2015.07.30.tar.gz">mcplusplus-2015.07.30.tar.gz</a> (183 KiB)

  \section License License

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.

Authors: Giacomo Mazzamuto and Lorenzo Pattelli, European Laboratory for
Non-Linear Spectroscopy (LENS)

  \section HowToInstall How to install

Extract the source tarball and create a new folder that will be used for
compilation. This is called the build folder. Open a terminal in the build
folder and issue the following command:

\code $ cmake [ADDITIONAL_DEFINES] pathToSourceFolder\endcode

where @c pathToSourceFolder is the absolute or relative path to the extracted
source folder. This will prepare the files needed for compilation.

If you wish to specify an installation path different from your system's
default (for example you want to install in @c /home/yourname/local), specify
the following define in the command above:

\code -DCMAKE_INSTALL_PREFIX=/home/yourname/local\endcode

If you have libraries and headers installed in non-standard paths, for example
in @c /home/yourname/local/include or @c /home/yourname/local/lib, you can add
those paths to the @c cmake command line like this:

\code -DCMAKE_LIBRARY_PATH=/home/yourname/local/lib -DCMAKE_CXX_FLAGS=-I/home/yourname/local/include/ \endcode

Once @c cmake has been run, you can build the project and install it in the
specified folder with the following command:

\code $ make install\endcode

If you installed in a local folder, in order to be able to use the software
you'll have to export the following environment variables in every shell that
you open:

\code
export PATH=/home/yourname/local/bin:$PATH
export LD_LIBRARY_PATH=/home/yourname/local/lib:$LD_LIBRARY_PATH
export PYTHONPATH=/home/yourname/local/lib:$PYTHONPATH
\endcode

assuming, again, your installation prefix to be @c /home/yourname/local/. You
can also place the lines above in your shell's configuration file.

\subsection BuildOptions Build Options

The following options can be specified in the cmake command line preceded by @c
-D, for example \code -DBUILD_PYTHON_BINDINGS=ON \endcode

Boolean options:
- @c ENABLE_DOCUMENTATION Enables using Doxygen to build an HTML documentation.
Run <tt>make documentation</tt> followed by <tt>make install</tt> to install
the documentation in your installation path.

- @c BUILD_PYTHON_BINDINGS Build bindings for Python. Remember to set the
@c PYTHONPATH environment variable as shown above.

- @c ENABLE_TRAJECTORY Enable functions for saving trajectory points in memory.

\section Tutorials Tutorials

These simple tutorials are meant to showcase the easy and straightforward
interface provided by MCPlusPlus.

\subsection PythonTutorial Python Tutorial

To take advantage of Python scripting you must compile MCPlusPlus with the @c
-DBUILD_PYTHON_BINDINGS=ON flag and set the @c PYTHONPATH environment variable
as described above.

\include example.py

Create a file @c example.py with the contents shown above. You can find this
file also in the @c examples folder of the source tarball. Once you have
created it, you probably need to grant it execution permissions using

\code
$ chmod +x example.py
\endcode

Then run the simulation by simply issuing
\code
$ ./example.py
\endcode

Here is an example of what the output may look like:

\code
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 0
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 1
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 2
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 3
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 7
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 5
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 6
[2015-02-19 17:17:03][MCPP::Simulation] starting... Number of walkers = 125000000, original seed = 4
[2015-02-19 17:17:04][MCPP::Simulation]

================
transmitted: 454581567
ballistic: 225229317
reflected: 278973129
back-reflected: 41231183

Completed in 6871 seconds
================
\endcode

While the simulation runs, you can query its progress by sending a USR2 signal
to the process. To do this, open another shell and issue:
\code $ killall -USR2 example.py \endcode
or
\code
$ kill -USR2 [pid of your process]
\endcode

Once the simulation has ended, the histogrammed data is saved in an H5 file
named @c example.h5 as was specified in the script. This file contains several
datasets, you can list them with the command

\code
$ h5ls example.h5
photon-counters          Dataset {4}
points                   Dataset {20001, 2}
points_vs_times          Dataset {201, 502}
sample                   Dataset {4, 4/Inf}
times                    Dataset {501, 3}
\endcode

Notice the three datasets containg the histograms that were defined in the
Python script: @c points, @c times and @c points_vs_times. You can inspect the
file contents using a graphical viewer:

\code
$ hdfview example.h5
\endcode

or you can extract single datasets as text files:

\code
$ h5totxt -d [dataset name] example.h5 > dataset.txt
\endcode

In MATLAB you can directly load a dataset with:
\code
hdf5read('example.h5', 'dataset_name')
\endcode

\subsection CppTutorial C++ Tutorial
\include example.cpp

Create a file example.py with the contents shown above. You can find this file
also in the examples folder of the source tarball. Then compile it:

\code
g++ -I/home/yourname/local/include -L/home/yourname/local/lib example.cpp -o example /home/yourname/local/lib/libMCPlusPlus.a -lhdf5 -lhdf5_cpp -lboost_thread -lboost_system
\endcode

assuming again MCPlusPlus installed in @c /home/yourname/local/, and run it:

\code
$ ./example.py
\endcode

See the last part of \ref PythonTutorial "Python Tutorial" for an explanation
of how to examine the output data.
*/
